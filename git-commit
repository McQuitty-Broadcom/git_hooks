#!/c/Python311/python
#
#
# This may need to be changed for the environment
#
#
# This script performs some basic operations:
# It gets a list of files changed in the current commit,
# then it checks out the item from Endevor, uploads the content
# to a dataset, then finally breaks the commit apart and creates
# commits for each individual file.  This supports TD Bank's need
# to use comments for their build process.
import argparse
import subprocess
import sys
import json
import traceback
import functools
import re
from enum import Enum
from shutil import which
from dotmap import DotMap
from pathlib import Path

# TODO: Script to set everything up
# HLQ for datasets
HLQ = "mcqth01"

ZOWE_CMD = which("zowe")
ZOWE_CMD_NAME = Path(which("zowe")).name
VSCODE_CMD = which("code")
VSCODE_CMD_NAME = Path(which("code")).name


# COLOR CODE FOR ERROR
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[93m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


# Why bridge.json fails
# Enumerated set to test for conflicts
class status(Enum):
    CONFLICT_ENDEVOR = 1
    CONFLICT_DATASET = 2
    NO_CONFLICT = 0


# This is a list of strings excluded from processing
# Any that match will be excluded
exclusions = [".json", ".git", ".bridge", "mapping.json"]

# Parsing for options
parser = argparse.ArgumentParser()
parser.add_argument("-p", "--prompt", help="Prompt for each file",
                    action="store_true")
parser.add_argument(
    "-l", "--logging", help="Logging for Debugging", action="store_true")
parser.add_argument(
    "-o",
    "--overwrite-dataset",
    help="WARNING: This will overwrite the dataset contents",
    action="store_true")
parser.add_argument("-x", "--experimental",
                    help="Experimental features",
                    action="store_true")
args = parser.parse_args()


# Decorator to log functions to make it cleaner
def log_exec(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        function_name = func.__name__
        args_str = ", ".join([repr(arg) for arg in args])
        kwargs_str = ", ".join(
            [f"{key}={value!r}" for key, value in kwargs.items()])
        logger(f"Entering: {function_name}({args_str}, {kwargs_str})")
        result = func(*args, **kwargs)
        logger(f"Exiting:  {function_name} -> {result!r}")
        return result

    return wrapper


# @log_exec
def write_file(name, contents):
    f = open(name, "w")
    f.write(contents)
    f.close()


def preflight_check():
    return which("zowe") is not None


def code_installed():
    return which("code") is not None


if args.logging:
    print("Logging turned on.")
    print("If you want to capture the output, use git-commit > log.txt")


# Routine to log and display output
def logger(msg, display=False):
    if display or args.logging:
        print(f"{msg}")


# Reads the mapping file to ensure we are on the correct branch
# And won't process items if we are on a non-synchronized branch
def read_mapping():
    with open(".ebg/mapping.json") as f:
        mapping = json.load(f)
    return mapping


@log_exec
def ds_member_exists(dsn, member):
    members = execute(f"{ZOWE_CMD_NAME} files list all-members {dsn}")
    members = clean_list(members)
    if member not in members:
        logger("Dataset Doesn't Exist")
        return False
    logger("Dataset Exists")
    return True


@log_exec
def proceed_to_copy(element, type, dsn, file):
    if ds_member_exists(dsn, element) is False:
        return status.NO_CONFLICT
    element_contents = get_endevor_element(element, type)
    dataset_contents = get_dataset_member(dsn, element)
    previous_contents = get_previous_commit(file)
    if args.logging:
        write_file("element.txt", element_contents)
        write_file("dataset.txt", dataset_contents)
        write_file("previous.txt", previous_contents)
    if compare_strings(element_contents, dataset_contents):
        return status.NO_CONFLICT
    else:
        if compare_strings(dataset_contents, previous_contents):
            return status.NO_CONFLICT
        else:
            return status.CONFLICT_DATASET


# @log_exec
def get_endevor_element(element, type):
    element_contents = execute(
        f"{ZOWE_CMD_NAME} endevor ret element {element} --type {type} "
        + f"--system {system} --sub {subsystem} --sm true"
    )
    return remove_empty_lines(element_contents)


# @log_exec
def get_dataset_member(dsn, member):
    ds_contents = execute(f"{ZOWE_CMD_NAME} files view ds {dsn}({member})")
    return remove_empty_lines(ds_contents)


# @log_exec
def get_previous_commit(file) -> str:
    previous_file_contents = execute(f"git show HEAD:{file}")
    return remove_empty_lines(previous_file_contents)


@log_exec
def compare_strings(str1, str2):
    # we need to remove trailing spaces before newlines
    str1 = re.sub(r"\s+$", "", str1, flags=re.M)
    str2 = re.sub(r"\s+$", "", str2, flags=re.M)
    return str1 == str2


# We pass in various commands, so let's see if the output is JSON or not.
def is_json(txt):
    try:
        json.loads(txt)
    except ValueError:
        return False
    return True


@log_exec
def last_comment(data, environment, sn):
    element_list = list(
        filter(lambda env: env["envName"] == environment, data))
    logger(f"Element List: {element_list}")

    # if we only find one, we return the value, regardless.
    if len(element_list) == 0:
        logger("No previous comment, please see admin for next steps", True)
        sys.exit(2)
    if len(element_list) == 1:
        msg = element_list[0]["lastActComment"]
        return msg
    elif len(element_list) > 1:
        # What do we want to do here?
        return element_list[0]["lastActComment"]


@log_exec
def get_last_commit_message(file, environment, system, subsystem,
                            type, stageNumber):
    cmd = (
        f"{ZOWE_CMD_NAME} endevor list elements {file} --env * --sys {system} "
        + f"--sub {subsystem} --sn * --type {type} --sm " +
        "--rfj --write-report false"
    )
    output = execute(cmd)
    json_out = json.loads(output)
    if "data" not in json_out.keys():
        logger("No previous comment, please see admin for next steps", True)
        sys.exit(2)
    return last_comment(json_out["data"], environment, stageNumber)


# The API responses aren't normalized, so let's find the right error condition
@log_exec
def process_errors(msg):
    if "messages" in msg["data"]:
        logger(msg["data"]["messages"], True)
    elif "commandResponse" in msg["data"]:
        logger(msg["data"]["commandResponse"], True)
    else:
        logger("Untrapped Error")


# Do some work to make this better?
@log_exec
def execute(cmd):
    cmd_output = ""
    try:
        cmd_output = subprocess.run(cmd, capture_output=True,
                                    text=True, timeout=30)
        if is_json(cmd_output.stdout):
            logger("JSON output")
            out = json.loads(cmd_output.stdout)
            logger(out)
            # Check for return code and report message
            # Do more checking here
            if out["success"] is not True:
                logger(f"Error executing: {cmd_output.args}", True)
                process_errors(out)
                sys.exit(2)
        return cmd_output.stdout
    except SystemExit:
        print("Error processing files, see above.")
        sys.exit(2)
    except:
        logger(f"Error executing cmd:{cmd_output.args}", True)
        logger(sys.exc_info()[0])
        logger(traceback.extract_stack())
        sys.exit(2)


# Parses the dataset to create the DSN (dot notation) from path,
# and get the filename (without extension)
@log_exec
def parse_dataset(path):
    filename = path.rsplit("/", 1)[1].split(".")[0]
    dsn = path.rsplit("/", 1)[0].replace("/", ".")
    return dsn, filename


# Parses the filepath to get system, subsystem, type and name
# from file structure
@log_exec
def parse_filename(filepath):
    # If it doesn't fit within this structure, we want to fail it.
    try:
        file_system = filepath.split("/")[0]
        file_subsystem = filepath.split("/")[1]
        file_type = filepath.split("/")[2]
        file_name = filepath.split("/")[3]
        logger(
            f"Parsed filename: {file_system} {file_subsystem} " +
            f"{file_type} {file_name}"
        )
        return file_system, file_subsystem, file_type, file_name
    except:
        logger("Couldn't parse filename", True)
        return False


# Gets the current branch, so we can test to ensure we are on a sync'd branch
@log_exec
def get_branch():
    return (
        execute("git branch --show-current")
        .replace("* ", "").replace("\n", "").strip()
    )


# Gets the Endevor Location and ensures we are on a mapped branch
@log_exec
def get_endevor_location():
    mapping = DotMap(read_mapping())
    mapped_branches = mapping.branches
    env = list(
        filter(lambda branches: branches.name == branch, mapped_branches))
    if not env:
        logger(
            'Branch not Mapped\nIf you need to commit this branch, ' +
            'run:\ngit commit -m "msg" --no-verify',
            True
        )
        sys.exit(2)
    try:
        environment = env[0].environment
        stageNumber = env[0].stageNumber
        system = env[0].systems[0].name
        subsystem = env[0].systems[0].subsystems[0].name
        try:
            alias = env[0].systems[0].subsystems[0].alias
        except:
            alias = None
        logger(
            f"Endevor Location info: {environment}\{stageNumber}" +
            "\{system}\{subsystem}\{alias}"
        )
    except:
        logger(bcolors.FAIL +
               "Error capturing mapping location" +
               bcolors.ENDC,
               True)
        sys.exit(2)
    return environment, stageNumber, system, subsystem, alias


# To fit with current process, we want to check out the
# file from Endevor, so it is locked.
@log_exec
def checkout_file(file, type, dsn):
    ccid = comment = "TEMP"  # Does this need updating?
    file = file.split(".")[0]
    signout_cmd = (
        f"{ZOWE_CMD_NAME} endevor ret element {file} --env {environment} " +
        f"--sys {system} --sub {subsystem} --sn {stageNumber} " +
        f'--type {type} --signout --ccid {ccid} --comment "{comment}" ' +
        f"--rfj --sm --write-report false --td {dsn} --rm true"
    )
    execute(signout_cmd)
    logger(f"{file} checked out")


@log_exec
def update_dataset(file, system, subsystem):
    if not any(value in file for value in exclusions):
        file_system, file_subsystem = parse_filename(file)[0:2]
        if file_system == system and (
            file_subsystem == subsystem or file_system == alias
        ):
            dsn, fn = parse_dataset(file)
            dsname = f'"{HLQ}.{branch}.{dsn}({fn})"'
            with open(file, "r") as f:
                contents = f.read()
            logger(f"Copying {file}, contents\n\n\n\n{contents}")
            execute(f"{ZOWE_CMD_NAME} files upload file-to-data-set {file} " +
                    f"{dsname} --rfj")
            logger(f"{file} checkout and {dsname.upper()} updated.", True)


# Sets the operation, then commits it.
@log_exec
def commit_files(file, comment, operation):
    if operation == "A" or operation == "M":
        execute(f"git add {file}")
    elif operation == "D":
        execute(f"git rm {file}")
    execute(f'git commit -m "{comment}" --no-verify')


@log_exec
def remove_empty_lines(text):
    return "".join([line for line in text if line != ""])


@log_exec
def clean_list(x):
    x = x.split("\n")
    x.remove("")
    return x


@log_exec
def file_prompting(file):
    if args.prompt:
        add = input(f"Would you like to store {file}? (y/n)")
        if add == "n":
            # If we don't want to process it, we skip it using continue
            logger(f"Skipping {file}.", True)
            return True
        else:
            return False


@log_exec
def modify_operation(file, name, tp, dsname):
    logger(f"Checking out {file}", True)
    checkout_file(name, tp, dsname)
    commit_msg = get_last_commit_message(
        name.split(".")[0], environment, system,
        subsystem, tp, stageNumber
    )
    logger(f"{file} reusing comment {commit_msg}", True)
    commit_files(file, commit_msg, "M")


@log_exec
def process_modify(fn, tp, dsname, file, sub_or_alias, name):
    over = None
    can_copy = proceed_to_copy(fn, tp, dsname, file)
    if can_copy == status.NO_CONFLICT or args.overwrite_dataset is True:
        if args.overwrite_dataset:
            over = input(
                "WARNING: Would you like to overwrite the "
                + "dataset with current changes in it? (y/n)"
            )
        if over == "y" or over is None:
            logger(f"Overwriting dataset: {dsname}", True)
            modify_operation(file, name, tp, dsname)
            update_dataset(file, system, sub_or_alias)
        else:
            logger("Skipping dataset update", True)
    else:
        if can_copy == status.CONFLICT_ENDEVOR:
            logger(
                "There's a conflict between the Endevor Element and Dataset",
                True)
        elif can_copy == status.CONFLICT_DATASET:
            if args.experimental is False:
                dsname = dsname.replace('"', "")
                logger(
                    bcolors.FAIL +
                    f"There's a conflict between the dataset {dsname} "
                    + "and the commit.  This could be due to someone "
                    + "making changes in the dataset." + bcolors.ENDC,
                    True)
                logger(
                    "To download the dataset to a local file, run " +
                    f'\'{bcolors.OKBLUE}zowe files download ds ' +
                    f'"{dsname}({fn})" -f <filename>\'"{bcolors.ENDC}',
                    True)
                logger(f"To compare the files, run '{bcolors.OKBLUE}" +
                       f"{VSCODE_CMD_NAME} --diff <filename> {file}'", True)
                logger(
                    f"Make your changes and save them to {file}, " +
                    f"then run '{bcolors.OKBLUE}git-commit -o{bcolors.ENDC}'",
                    True)
            else:
                # Experimental section, opens Code with the different
                if code_installed():
                    logger(f"{bcolors.FAIL}Differences found in " +
                           "the dataset. Opening the files in " +
                           f"{VSCODE_CMD_NAME}.{bcolors.ENDC}")
                    execute(f'{bcolors.OKGREEN}{ZOWE_CMD_NAME} files ' +
                            f'download ds "{dsname}({fn})" -f .\{fn}' +
                            bcolors.ENDC)
                    execute(f'{VSCODE_CMD_NAME} --diff .\{fn} {file}')
                    logger(f"Run '{bcolors.OKBLUE}git-commit " +
                           f"-o{bcolors.ENDC}' to commit the changes " +
                           "after saving your work.",
                           True)
                else:
                    logger("You must have VS Code installed for this to work.")
        logger(bcolors.FAIL + "Resolve this issue and try the command again." +
               bcolors.ENDC, True)
        sys.exit(2)


# Get files to add
# We have to run through the files in a specific order.  If Adds aren't
# done first, they will revert back.  Here we validate the operations we
# are looking for and process them.
@log_exec
def break_commit_apart(operation):
    valid_operations = ["M", "A", "D"]
    if operation not in valid_operations:
        logger(f"Error, you used {operation}", True)
        sys.exit(2)
    files = clean_list(
        execute(f"git diff-index --name-only --diff-filter {operation} HEAD")
    )
    if len(files) > 0:
        logger(f"Modified FILES: {files}")
        for file in files:
            if file_prompting(file):
                continue
            logger(f"Processing {file}", True)
            if not any(value in file for value in exclusions):
                if (
                    # must be at the beginning or it is skipped
                    file.find(f"{system}/{subsystem}") == 0
                    or file.find(f"{system}/{alias}") == 0
                ):
                    syst, sub, tp, name = parse_filename(file)
                    dsn, fn = parse_dataset(file)
                    dsname = f'"{HLQ}.{branch}.{dsn}"'
                    sub_or_alias = subsystem if alias is None else alias
                    logger(f"Operation: {operation}")
                    logger(f"PARAMS: {syst}:{sub}:{tp}:{name}:{dsn}:{fn}")
                    # Do we want code for adding the file?
                    # If so, how do we handle the comment?
                    if operation == "M":
                        process_modify(fn, tp, dsname, file,
                                       sub_or_alias, name)
                    elif operation == "A":
                        # We can't add the file, at least not yet,
                        # but we can update the dataset
                        update_dataset(file, system, sub_or_alias)
                        logger(f"{bcolors.BOLD}{bcolors.FAIL}{fn} has been " +
                               "added to the dataset, but it has not been " +
                               "added to Endevor.  Log into Endevor, " +
                               "add the element and set all the options." +
                               bcolors.ENDC, True)
                    elif operation == "D":
                        commit_files(file, "Deleting", operation)
                    else:
                        logger("Operation not defined", True)
                        sys.exit(2)
                else:
                    logger(f"Non-mapped file processed: {file}", True)
                    commit_files(file, "Support File", operation)
            else:
                logger(f"Non-mapped file processed: {file}", True)
                commit_files(file, "Support File", operation)


if __name__ == "__main__":
    # Sanity check to ensure Zowe is installed
    if not preflight_check():
        logger(
            f"{bcolors.FAIL}Zowe is not installed, please contact" +
            "your admin for assistance.{bcolors.ENDC}",
            True)
        sys.exit(2)

    # Get the working branch name
    branch = get_branch()
    logger(f"Git branch: {bcolors.FAIL}{branch}{bcolors.ENDC}", True)

    #
    # Run add command for each item changed
    environment, stageNumber, system, subsystem, alias = get_endevor_location()

    # simple change
    # Perform actions  Do we need other actions?
    break_commit_apart("D")
    break_commit_apart("A")  # How do we want to handle that for new files?
    break_commit_apart("M")
    logger("\n", True)
    logger(execute("git status"), True)
    sys.exit(0)
